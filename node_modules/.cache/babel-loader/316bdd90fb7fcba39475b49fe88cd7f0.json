{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(this, function (exports) {\n  'use strict'; // SCALES USED TO INVERT COURT Y COORDS AND MAP SHOOTING PERCENTAGES OF BINS TO A FILL COLOR \n\n  var yScale = d3.scaleLinear().domain([0, 47]).rangeRound([47, 0]);\n\n  function court() {\n    // NBA court dimensions are 50ft sideline to sideline and 94feet baseline to baseline (47ft half court)\n    // Forcing at least a 500x470 ratio for the court in order to paint shots appropriately        \n    var width = 500,\n        height = .94 * width;\n\n    function court(selection) {\n      selection.each(function (data) {\n        // Responsive container for the shotchart\n        d3.select(this).style(\"max-width\", width / 16 + \"em\"); // Select the SVG if it exists\n\n        if (!d3.select(this).selectAll(\"svg\").empty()) {\n          var svg = d3.select(this).selectAll(\"svg\");\n        } else {\n          var svg = d3.select(this).append(\"svg\").attr(\"viewBox\", \"0, 0, \" + 50 + \", \" + 47 + \"\").classed(\"court\", true); // Append the outer paint rectangle\n\n          svg.append(\"g\").classed(\"court-paint\", true).append(\"rect\").attr(\"width\", 16).attr(\"height\", 19).attr(\"x\", 25).attr(\"transform\", \"translate(\" + -8 + \",\" + 0 + \")\").attr(\"y\", yScale(19)); // Append inner paint lines\n\n          svg.append(\"g\").classed(\"inner-court-paint\", true).append(\"line\").attr(\"x1\", 19).attr(\"x2\", 19).attr(\"y1\", yScale(19)).attr(\"y2\", yScale(0));\n          svg.append(\"g\").classed(\"inner-court-paint\", true).append(\"line\").attr(\"x1\", 31).attr(\"x2\", 31).attr(\"y1\", yScale(19)).attr(\"y2\", yScale(0)); // Append foul circle\n          // Add clipPaths w/ rectangles to make the 2 semi-circles with our desired styles\n\n          var dashedFoulCircle = svg.append(\"g\").classed(\"foul-circle dashed\", true);\n          dashedFoulCircle.append(\"defs\").append(\"clipPath\").attr(\"id\", \"cut-off-top\").append(\"rect\").attr(\"width\", 12).attr(\"height\", 6).attr(\"x\", 25).attr(\"y\", yScale(19)) // 47-19 (top of rectangle is pinned to foul line, which is at 19 ft)\n          .attr(\"transform\", \"translate(\" + -6 + \",\" + 0 + \")\");\n          dashedFoulCircle.append(\"circle\").attr(\"cx\", 25).attr(\"cy\", yScale(19)) // 47-19\n          .attr(\"r\", 6).attr(\"stroke-dasharray\", 1 + \",\" + 1).attr(\"clip-path\", \"url(#cut-off-top)\");\n          var solidFoulCircle = svg.append(\"g\").classed(\"foul-circle solid\", true);\n          solidFoulCircle.append(\"defs\").append(\"clipPath\").attr(\"id\", \"cut-off-bottom\").append(\"rect\").attr(\"width\", 12).attr(\"height\", 6).attr(\"x\", 25).attr(\"y\", yScale(19))\n          /*foul line is 19 feet, then transform by 6 feet (circle radius) to pin rectangle above foul line..clip paths only render the parts of the circle that are in the rectangle path */\n          .attr(\"transform\", \"translate(\" + -6 + \",\" + -6 + \")\");\n          solidFoulCircle.append(\"circle\").attr(\"cx\", 25).attr(\"cy\", yScale(19)).attr(\"r\", 6).attr(\"clip-path\", \"url(#cut-off-bottom)\"); // Add backboard and rim\n\n          svg.append(\"g\").classed(\"backboard\", true).append(\"line\").attr(\"x1\", 22).attr(\"x2\", 28).attr(\"y1\", yScale(4)) // 47-4\n          .attr(\"y2\", yScale(4)); // 47-4\n\n          svg.append(\"g\").classed(\"rim\", true).append(\"circle\").attr(\"cx\", 25).attr(\"cy\", yScale(4.75)) // 47-4.75 need to set center point of circle to be 'r' above backboard\n          .attr(\"r\", .75); //regulation rim is 18 inches\n          // Add restricted area -- a 4ft radius circle from the center of the rim\n\n          var restrictedArea = svg.append(\"g\").classed(\"restricted-area\", true);\n          restrictedArea.append(\"defs\").append(\"clipPath\").attr(\"id\", \"restricted-cut-off\").append(\"rect\").attr(\"width\", 8) // width is 2r of the circle it's cutting off\n          .attr(\"height\", 4) // height is 1r of the circle it's cutting off\n          .attr(\"x\", 25) // center rectangle\n          .attr(\"y\", yScale(4.75)).attr(\"transform\", \"translate(\" + -4 + \",\" + -4 + \")\");\n          restrictedArea.append(\"circle\").attr(\"cx\", 25).attr(\"cy\", yScale(4.75)).attr(\"r\", 4).attr(\"clip-path\", \"url(#restricted-cut-off)\");\n          restrictedArea.append(\"line\").attr(\"x1\", 21).attr(\"x2\", 21).attr(\"y1\", yScale(5.25)).attr(\"y2\", yScale(4));\n          restrictedArea.append(\"line\").attr(\"x1\", 29).attr(\"x2\", 29).attr(\"y1\", yScale(5.25)).attr(\"y2\", yScale(4)); // Add 3 point arc\n\n          var threePointArea = svg.append(\"g\").classed(\"three-point-area\", true);\n          threePointArea.append(\"defs\").append(\"clipPath\").attr(\"id\", \"three-point-cut-off\").append(\"rect\").attr(\"width\", 44).attr(\"height\", 23.75).attr(\"x\", 25).attr(\"y\", yScale(4.75)) // put recentagle at centerpoint of circle then translate by the inverse of the circle radius to cut off top half\n          .attr(\"transform\", \"translate(\" + -22 + \",\" + -23.75 + \")\");\n          threePointArea.append(\"circle\").attr(\"cx\", 25).attr(\"cy\", yScale(4.75)).attr(\"r\", 23.75).attr(\"clip-path\", \"url(#three-point-cut-off)\");\n          threePointArea.append(\"line\").attr(\"x1\", 3).attr(\"x2\", 3).attr(\"y1\", yScale(14)).attr(\"y2\", yScale(0));\n          threePointArea.append(\"line\").attr(\"x1\", 47).attr(\"x2\", 47).attr(\"y1\", yScale(14)).attr(\"y2\", yScale(0)); // Add key lines\n\n          var keyLines = svg.append(\"g\").classed(\"key-lines\", true);\n          keyLines.append(\"line\").attr(\"x1\", 16).attr(\"x2\", 17).attr(\"y1\", yScale(7)).attr(\"y2\", yScale(7));\n          keyLines.append(\"line\").attr(\"x1\", 16).attr(\"x2\", 17).attr(\"y1\", yScale(8)).attr(\"y2\", yScale(8));\n          keyLines.append(\"line\").attr(\"x1\", 16).attr(\"x2\", 17).attr(\"y1\", yScale(11)).attr(\"y2\", yScale(11));\n          keyLines.append(\"line\").attr(\"x1\", 16).attr(\"x2\", 17).attr(\"y1\", yScale(14)).attr(\"y2\", yScale(14));\n          keyLines.append(\"line\").attr(\"x1\", 33).attr(\"x2\", 34).attr(\"y1\", yScale(7)).attr(\"y2\", yScale(7));\n          keyLines.append(\"line\").attr(\"x1\", 33).attr(\"x2\", 34).attr(\"y1\", yScale(8)).attr(\"y2\", yScale(8));\n          keyLines.append(\"line\").attr(\"x1\", 33).attr(\"x2\", 34).attr(\"y1\", yScale(11)).attr(\"y2\", yScale(11));\n          keyLines.append(\"line\").attr(\"x1\", 33).attr(\"x2\", 34).attr(\"y1\", yScale(14)).attr(\"y2\", yScale(14)); // Append baseline\n\n          svg.append(\"g\").classed(\"court-baseline\", true).append(\"line\").attr(\"x1\", 0).attr(\"x2\", 50).attr(\"y1\", yScale(0)).attr(\"y2\", yScale(0));\n          svg.append(\"g\").classed(\"shots\", true);\n        }\n\n        ;\n      });\n    }\n\n    ;\n\n    court.width = function (_) {\n      if (!arguments.length) return width;\n      width = _;\n      height = .94 * _;\n      return court;\n    };\n\n    return court;\n  }\n\n  ;\n  var activeDisplay = \"scatter\";\n  var activeTheme = \"day\"; // SCALES USED TO INVERT COURT Y COORDS AND MAP SHOOTING PERCENTAGES OF BINS TO A FILL COLOR \n\n  var yScale$1 = d3.scaleLinear().domain([0, 47]).rangeRound([47, 0]);\n  var percentFormatter = d3.format(\".2%\");\n\n  function shots() {\n    var hexRadiusValues = [.8, 1, 1.2],\n        hexMinShotThreshold = 1,\n        heatScale = d3.scaleQuantize().domain([0, 1]).range(['#5458A2', '#6689BB', '#FADC97', '#F08460', '#B02B48']),\n        hexRadiusScale = d3.scaleQuantize().domain([0, 2]).range(hexRadiusValues),\n        toolTips = false,\n        hexbin = d3_hexbin.hexbin().radius(1.2).x(function (d) {\n      return d.key[0];\n    }) // accessing the x, y coords from the nested json key\n    .y(function (d) {\n      return yScale$1(d.key[1]);\n    });\n\n    var _nestShotsByLocation = function _nestShotsByLocation(data) {\n      var nestedData = d3.nest().key(function (d) {\n        return [d.x, d.y];\n      }).rollup(function (v) {\n        return {\n          \"made\": d3.sum(v, function (d) {\n            return d.shot_made_flag;\n          }),\n          \"attempts\": v.length,\n          \"shootingPercentage\": d3.sum(v, function (d) {\n            return d.shot_made_flag;\n          }) / v.length\n        };\n      }).entries(data); // change to use a string split and force cast to int\n\n      nestedData.forEach(function (a) {\n        a.key = JSON.parse(\"[\" + a.key + \"]\");\n      });\n      return nestedData;\n    };\n\n    var _getHexBinShootingStats = function _getHexBinShootingStats(data, index) {\n      var attempts = d3.sum(data, function (d) {\n        return d.value.attempts;\n      });\n      var makes = d3.sum(data, function (d) {\n        return d.value.made;\n      });\n      var shootingPercentage = makes / attempts;\n      data.shootingPercentage = shootingPercentage;\n      data.attempts = attempts;\n      data.makes = makes;\n      return data;\n    };\n\n    function shots(selection) {\n      selection.each(function (data) {\n        var shotsGroup = d3.select(this).select(\"svg\").select(\".shots\"),\n            legends = d3.select(this).select(\"#legends\"),\n            nestedData = _nestShotsByLocation(data),\n            hexBinCoords = hexbin(nestedData).map(_getHexBinShootingStats);\n\n        if (activeDisplay === \"scatter\") {\n          if (legends.empty() === false) {\n            legends.remove();\n          }\n\n          var shots = shotsGroup.selectAll(\".shot\").data(data, function (d) {\n            return [d.x, d.y];\n          });\n          shots.exit().transition().duration(1000).attr(\"r\", 0).attr(\"d\", hexbin.hexagon(0)).remove();\n\n          if (toolTips) {\n            var tool_tip = d3.tip().attr(\"class\", \"d3-tip\").offset([-8, 0]).html(function (d) {\n              return d.shot_distance + \"' \" + d.action_type;\n            });\n            shotsGroup.call(tool_tip);\n          }\n\n          shots.enter().append(\"circle\").classed(\"shot\", true).classed(\"make\", function (d) {\n            return d.shot_made_flag === 1; // used to set fill color to green if it's a made shot\n          }).classed(\"miss\", function (d) {\n            return d.shot_made_flag === 0; // used to set fill color to red if it's a miss\n          }).attr(\"cx\", function (d) {\n            return d.x;\n          }).attr(\"cy\", function (d) {\n            return yScale$1(d.y);\n          }).attr(\"r\", 0).on('mouseover', function (d) {\n            if (toolTips) {\n              tool_tip.show(d);\n            }\n          }).on('mouseout', function (d) {\n            if (toolTips) {\n              tool_tip.hide(d);\n            }\n          }).transition().duration(1000).attr(\"r\", .5);\n        } else if (activeDisplay === \"hexbin\") {\n          var shots = shotsGroup.selectAll(\".shot\").data(hexBinCoords, function (d) {\n            return [d.x, d.y];\n          });\n          shots.exit().transition().duration(1000).attr(\"r\", 0).attr(\"d\", hexbin.hexagon(0)).remove();\n\n          if (toolTips) {\n            var tool_tip = d3.tip().attr(\"class\", \"d3-tip\").offset([-8, 0]).html(function (d) {\n              return d.makes + \" / \" + d.attempts + \" (\" + percentFormatter(d.shootingPercentage) + \")\";\n            });\n            shotsGroup.call(tool_tip);\n          }\n\n          shots.enter().append(\"path\").classed(\"shot\", true).attr(\"transform\", function (d) {\n            return \"translate(\" + d.x + \",\" + d.y + \")\";\n          }).attr(\"d\", hexbin.hexagon(0)).on('mouseover', function (d) {\n            if (toolTips) {\n              tool_tip.show(d);\n            }\n          }).on('mouseout', function (d) {\n            if (toolTips) {\n              tool_tip.hide(d);\n            }\n          }).transition().duration(1000).attr(\"d\", function (d) {\n            if (d.length >= hexMinShotThreshold) {\n              if (d.length <= 3) {\n                return hexbin.hexagon(hexRadiusScale(0));\n              } else if (3 < d.length && d.length <= 8) {\n                return hexbin.hexagon(hexRadiusScale(1));\n              } else {\n                return hexbin.hexagon(hexRadiusScale(2));\n              }\n            }\n          }).style(\"fill\", function (d) {\n            return heatScale(d.shootingPercentage);\n          }); // CHANGE TO USE SELECTION.EMPTY()\n\n          if (legends.empty() === true) {\n            var legendSVG = d3.select(this).append('svg').attr(\"viewBox\", \"0, 0, \" + 50 + \", \" + 10 + \"\").attr('id', 'legends'),\n                efficiencyLegend = legendSVG.append('g').classed('legend', true),\n                frequencyLegend = legendSVG.append('g').classed('legend', true).classed('frequency', true),\n                frequencyLegendXStart = 7;\n            efficiencyLegend.append(\"text\").classed('legend-text', true).attr(\"x\", 40).attr(\"y\", 5).attr(\"text-anchor\", \"middle\").text(\"Efficiency\");\n            efficiencyLegend.append(\"text\").classed(\"legend-text\", true).attr(\"x\", 34.25).attr(\"y\", 2.5).attr(\"text-anchor\", \"end\").text(\"cold\");\n            efficiencyLegend.append(\"text\").classed(\"legend-text\", true).attr(\"x\", 45.75).attr(\"y\", 2.5).attr(\"text-anchor\", \"start\").text(\"hot\");\n            efficiencyLegend.selectAll('path').data(heatScale.range()).enter().append('path').attr(\"transform\", function (d, i) {\n              return \"translate(\" + (35 + (1 + i * 2) * 1) + \", \" + 2 + \")\";\n            }).attr('d', hexbin.hexagon(0)).transition().duration(1000).attr('d', hexbin.hexagon(1)).style('fill', function (d) {\n              return d;\n            });\n            efficiencyLegend.selectAll(\"text\").style(\"fill\", function () {\n              if (activeTheme === \"night\") {\n                return \"white\";\n              } else if (activeTheme === \"day\") {\n                return \"black\";\n              }\n\n              ;\n            });\n            frequencyLegend.append(\"text\").classed('legend-text', true).attr(\"x\", 10.25).attr(\"y\", 5).attr(\"text-anchor\", \"middle\").text(\"Frequency\");\n            frequencyLegend.append(\"text\").classed(\"legend-text\", true).attr(\"x\", 6.25).attr(\"y\", 2.5).attr(\"text-anchor\", \"end\").text(\"low\");\n            frequencyLegend.selectAll('path').data(hexRadiusValues).enter().append('path').attr(\"transform\", function (d, i) {\n              frequencyLegendXStart += d * 2;\n              return \"translate(\" + (frequencyLegendXStart - d) + \", \" + 2 + \")\";\n            }).attr('d', hexbin.hexagon(0)).transition().duration(1000).attr('d', function (d) {\n              return hexbin.hexagon(d);\n            });\n            frequencyLegend.append(\"text\").classed(\"legend-text\", true).attr(\"x\", 13.75).attr(\"y\", 2.5).attr(\"text-anchor\", \"start\").text(\"high\");\n            frequencyLegend.selectAll(\"text\").style(\"fill\", function () {\n              if (activeTheme === \"night\") {\n                return \"white\";\n              } else if (activeTheme === \"day\") {\n                return \"black\";\n              }\n\n              ;\n            });\n            frequencyLegend.selectAll(\"path\").style(\"fill\", function () {\n              if (activeTheme === \"night\") {\n                return \"none\";\n              } else if (activeTheme === \"day\") {\n                return \"grey\";\n              }\n\n              ;\n            });\n          }\n\n          ;\n        }\n\n        ;\n      });\n    }\n\n    ;\n\n    shots.displayType = function (_) {\n      if (!arguments.length) return activeDisplay;\n      activeDisplay = _;\n      return shots;\n    };\n\n    shots.shotRenderThreshold = function (_) {\n      if (!arguments.length) return hexMinShotThreshold;\n      hexMinShotThreshold = _;\n      return shots;\n    };\n\n    shots.displayToolTips = function (_) {\n      if (!arguments.length) return toolTips;\n      toolTips = _;\n      return shots;\n    };\n\n    shots.theme = function (_) {\n      if (!arguments.length) return activeTheme;\n      activeTheme = _;\n      return shots;\n    };\n\n    return shots;\n  }\n\n  ;\n  exports.court = court;\n  exports.shots = shots;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}